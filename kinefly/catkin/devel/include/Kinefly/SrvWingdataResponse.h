// Generated by gencpp from file Kinefly/SrvWingdataResponse.msg
// DO NOT EDIT!


#ifndef KINEFLY_MESSAGE_SRVWINGDATARESPONSE_H
#define KINEFLY_MESSAGE_SRVWINGDATARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Kinefly
{
template <class ContainerAllocator>
struct SrvWingdataResponse_
{
  typedef SrvWingdataResponse_<ContainerAllocator> Type;

  SrvWingdataResponse_()
    : angles()
    , intensities()
    , diffs()
    , anglesMajor()
    , anglesMinor()  {
    }
  SrvWingdataResponse_(const ContainerAllocator& _alloc)
    : angles(_alloc)
    , intensities(_alloc)
    , diffs(_alloc)
    , anglesMajor(_alloc)
    , anglesMinor(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _angles_type;
  _angles_type angles;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _intensities_type;
  _intensities_type intensities;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _diffs_type;
  _diffs_type diffs;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _anglesMajor_type;
  _anglesMajor_type anglesMajor;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _anglesMinor_type;
  _anglesMinor_type anglesMinor;




  typedef boost::shared_ptr< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SrvWingdataResponse_

typedef ::Kinefly::SrvWingdataResponse_<std::allocator<void> > SrvWingdataResponse;

typedef boost::shared_ptr< ::Kinefly::SrvWingdataResponse > SrvWingdataResponsePtr;
typedef boost::shared_ptr< ::Kinefly::SrvWingdataResponse const> SrvWingdataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Kinefly::SrvWingdataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace Kinefly

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'Kinefly': ['/home/nvidia/kinefly_catkin_ws/src/Kinefly/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad7d85edd0c1f0635498153160f1a904";
  }

  static const char* value(const ::Kinefly::SrvWingdataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad7d85edd0c1f063ULL;
  static const uint64_t static_value2 = 0x5498153160f1a904ULL;
};

template<class ContainerAllocator>
struct DataType< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Kinefly/SrvWingdataResponse";
  }

  static const char* value(const ::Kinefly::SrvWingdataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] angles\n\
float32[] intensities\n\
float32[] diffs\n\
float32[] anglesMajor\n\
float32[] anglesMinor\n\
\n\
";
  }

  static const char* value(const ::Kinefly::SrvWingdataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angles);
      stream.next(m.intensities);
      stream.next(m.diffs);
      stream.next(m.anglesMajor);
      stream.next(m.anglesMinor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SrvWingdataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Kinefly::SrvWingdataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Kinefly::SrvWingdataResponse_<ContainerAllocator>& v)
  {
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angles[i]);
    }
    s << indent << "intensities[]" << std::endl;
    for (size_t i = 0; i < v.intensities.size(); ++i)
    {
      s << indent << "  intensities[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.intensities[i]);
    }
    s << indent << "diffs[]" << std::endl;
    for (size_t i = 0; i < v.diffs.size(); ++i)
    {
      s << indent << "  diffs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.diffs[i]);
    }
    s << indent << "anglesMajor[]" << std::endl;
    for (size_t i = 0; i < v.anglesMajor.size(); ++i)
    {
      s << indent << "  anglesMajor[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.anglesMajor[i]);
    }
    s << indent << "anglesMinor[]" << std::endl;
    for (size_t i = 0; i < v.anglesMinor.size(); ++i)
    {
      s << indent << "  anglesMinor[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.anglesMinor[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINEFLY_MESSAGE_SRVWINGDATARESPONSE_H
