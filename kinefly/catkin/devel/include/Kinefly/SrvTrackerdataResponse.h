// Generated by gencpp from file Kinefly/SrvTrackerdataResponse.msg
// DO NOT EDIT!


#ifndef KINEFLY_MESSAGE_SRVTRACKERDATARESPONSE_H
#define KINEFLY_MESSAGE_SRVTRACKERDATARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Kinefly
{
template <class ContainerAllocator>
struct SrvTrackerdataResponse_
{
  typedef SrvTrackerdataResponse_<ContainerAllocator> Type;

  SrvTrackerdataResponse_()
    : color()
    , title1()
    , title2()
    , abscissa()
    , intensities()
    , diffs()
    , markersH()
    , markersV()  {
    }
  SrvTrackerdataResponse_(const ContainerAllocator& _alloc)
    : color(_alloc)
    , title1(_alloc)
    , title2(_alloc)
    , abscissa(_alloc)
    , intensities(_alloc)
    , diffs(_alloc)
    , markersH(_alloc)
    , markersV(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color_type;
  _color_type color;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _title1_type;
  _title1_type title1;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _title2_type;
  _title2_type title2;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _abscissa_type;
  _abscissa_type abscissa;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _intensities_type;
  _intensities_type intensities;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _diffs_type;
  _diffs_type diffs;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _markersH_type;
  _markersH_type markersH;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _markersV_type;
  _markersV_type markersV;




  typedef boost::shared_ptr< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SrvTrackerdataResponse_

typedef ::Kinefly::SrvTrackerdataResponse_<std::allocator<void> > SrvTrackerdataResponse;

typedef boost::shared_ptr< ::Kinefly::SrvTrackerdataResponse > SrvTrackerdataResponsePtr;
typedef boost::shared_ptr< ::Kinefly::SrvTrackerdataResponse const> SrvTrackerdataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace Kinefly

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'Kinefly': ['/home/nvidia/kinefly_catkin_ws/src/Kinefly/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6dc3a697e66363c2694c0fa5edb11a9";
  }

  static const char* value(const ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6dc3a697e66363cULL;
  static const uint64_t static_value2 = 0x2694c0fa5edb11a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Kinefly/SrvTrackerdataResponse";
  }

  static const char* value(const ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string color\n\
string title1\n\
string title2\n\
float32[] abscissa\n\
float32[] intensities\n\
float32[] diffs\n\
float32[] markersH\n\
float32[] markersV\n\
\n\
";
  }

  static const char* value(const ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.title1);
      stream.next(m.title2);
      stream.next(m.abscissa);
      stream.next(m.intensities);
      stream.next(m.diffs);
      stream.next(m.markersH);
      stream.next(m.markersV);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SrvTrackerdataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Kinefly::SrvTrackerdataResponse_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.color);
    s << indent << "title1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.title1);
    s << indent << "title2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.title2);
    s << indent << "abscissa[]" << std::endl;
    for (size_t i = 0; i < v.abscissa.size(); ++i)
    {
      s << indent << "  abscissa[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.abscissa[i]);
    }
    s << indent << "intensities[]" << std::endl;
    for (size_t i = 0; i < v.intensities.size(); ++i)
    {
      s << indent << "  intensities[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.intensities[i]);
    }
    s << indent << "diffs[]" << std::endl;
    for (size_t i = 0; i < v.diffs.size(); ++i)
    {
      s << indent << "  diffs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.diffs[i]);
    }
    s << indent << "markersH[]" << std::endl;
    for (size_t i = 0; i < v.markersH.size(); ++i)
    {
      s << indent << "  markersH[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.markersH[i]);
    }
    s << indent << "markersV[]" << std::endl;
    for (size_t i = 0; i < v.markersV.size(); ++i)
    {
      s << indent << "  markersV[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.markersV[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINEFLY_MESSAGE_SRVTRACKERDATARESPONSE_H
