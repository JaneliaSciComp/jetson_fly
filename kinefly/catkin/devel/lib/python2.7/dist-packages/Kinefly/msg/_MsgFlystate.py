# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from Kinefly/MsgFlystate.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import Kinefly.msg
import std_msgs.msg

class MsgFlystate(genpy.Message):
  _md5sum = "805e203f09167a53749bb837921c9afe"
  _type = "Kinefly/MsgFlystate"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header    header
MsgState  head
MsgState  abdomen
MsgState  left
MsgState  right
MsgState  aux

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: Kinefly/MsgState
float64[] angles
float64[] gradients
float64[] radii
float64 freq
float64 intensity
"""
  __slots__ = ['header','head','abdomen','left','right','aux']
  _slot_types = ['std_msgs/Header','Kinefly/MsgState','Kinefly/MsgState','Kinefly/MsgState','Kinefly/MsgState','Kinefly/MsgState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,head,abdomen,left,right,aux

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MsgFlystate, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.head is None:
        self.head = Kinefly.msg.MsgState()
      if self.abdomen is None:
        self.abdomen = Kinefly.msg.MsgState()
      if self.left is None:
        self.left = Kinefly.msg.MsgState()
      if self.right is None:
        self.right = Kinefly.msg.MsgState()
      if self.aux is None:
        self.aux = Kinefly.msg.MsgState()
    else:
      self.header = std_msgs.msg.Header()
      self.head = Kinefly.msg.MsgState()
      self.abdomen = Kinefly.msg.MsgState()
      self.left = Kinefly.msg.MsgState()
      self.right = Kinefly.msg.MsgState()
      self.aux = Kinefly.msg.MsgState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.head.angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.head.angles))
      length = len(self.head.gradients)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.head.gradients))
      length = len(self.head.radii)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.head.radii))
      _x = self
      buff.write(_get_struct_2d().pack(_x.head.freq, _x.head.intensity))
      length = len(self.abdomen.angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.abdomen.angles))
      length = len(self.abdomen.gradients)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.abdomen.gradients))
      length = len(self.abdomen.radii)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.abdomen.radii))
      _x = self
      buff.write(_get_struct_2d().pack(_x.abdomen.freq, _x.abdomen.intensity))
      length = len(self.left.angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.left.angles))
      length = len(self.left.gradients)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.left.gradients))
      length = len(self.left.radii)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.left.radii))
      _x = self
      buff.write(_get_struct_2d().pack(_x.left.freq, _x.left.intensity))
      length = len(self.right.angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.right.angles))
      length = len(self.right.gradients)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.right.gradients))
      length = len(self.right.radii)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.right.radii))
      _x = self
      buff.write(_get_struct_2d().pack(_x.right.freq, _x.right.intensity))
      length = len(self.aux.angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.aux.angles))
      length = len(self.aux.gradients)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.aux.gradients))
      length = len(self.aux.radii)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.aux.radii))
      _x = self
      buff.write(_get_struct_2d().pack(_x.aux.freq, _x.aux.intensity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.head is None:
        self.head = Kinefly.msg.MsgState()
      if self.abdomen is None:
        self.abdomen = Kinefly.msg.MsgState()
      if self.left is None:
        self.left = Kinefly.msg.MsgState()
      if self.right is None:
        self.right = Kinefly.msg.MsgState()
      if self.aux is None:
        self.aux = Kinefly.msg.MsgState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.head.angles = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.head.gradients = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.head.radii = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.head.freq, _x.head.intensity,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.abdomen.angles = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.abdomen.gradients = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.abdomen.radii = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.abdomen.freq, _x.abdomen.intensity,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.left.angles = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.left.gradients = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.left.radii = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.left.freq, _x.left.intensity,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.right.angles = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.right.gradients = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.right.radii = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.right.freq, _x.right.intensity,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.aux.angles = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.aux.gradients = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.aux.radii = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.aux.freq, _x.aux.intensity,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.head.angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.head.angles.tostring())
      length = len(self.head.gradients)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.head.gradients.tostring())
      length = len(self.head.radii)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.head.radii.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.head.freq, _x.head.intensity))
      length = len(self.abdomen.angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.abdomen.angles.tostring())
      length = len(self.abdomen.gradients)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.abdomen.gradients.tostring())
      length = len(self.abdomen.radii)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.abdomen.radii.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.abdomen.freq, _x.abdomen.intensity))
      length = len(self.left.angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.left.angles.tostring())
      length = len(self.left.gradients)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.left.gradients.tostring())
      length = len(self.left.radii)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.left.radii.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.left.freq, _x.left.intensity))
      length = len(self.right.angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.right.angles.tostring())
      length = len(self.right.gradients)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.right.gradients.tostring())
      length = len(self.right.radii)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.right.radii.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.right.freq, _x.right.intensity))
      length = len(self.aux.angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.aux.angles.tostring())
      length = len(self.aux.gradients)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.aux.gradients.tostring())
      length = len(self.aux.radii)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.aux.radii.tostring())
      _x = self
      buff.write(_get_struct_2d().pack(_x.aux.freq, _x.aux.intensity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.head is None:
        self.head = Kinefly.msg.MsgState()
      if self.abdomen is None:
        self.abdomen = Kinefly.msg.MsgState()
      if self.left is None:
        self.left = Kinefly.msg.MsgState()
      if self.right is None:
        self.right = Kinefly.msg.MsgState()
      if self.aux is None:
        self.aux = Kinefly.msg.MsgState()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.head.angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.head.gradients = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.head.radii = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.head.freq, _x.head.intensity,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.abdomen.angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.abdomen.gradients = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.abdomen.radii = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.abdomen.freq, _x.abdomen.intensity,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.left.angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.left.gradients = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.left.radii = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.left.freq, _x.left.intensity,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.right.angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.right.gradients = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.right.radii = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.right.freq, _x.right.intensity,) = _get_struct_2d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.aux.angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.aux.gradients = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.aux.radii = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.aux.freq, _x.aux.intensity,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
